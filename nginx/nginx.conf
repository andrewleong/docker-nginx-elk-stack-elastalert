# The user to run Nginx as, often www, www-data or nginx
# It is safest to leave the previous setting as it is
user nginx;

# Decent starting point for this is the number of cores/threads on the machine
# cat /proc/cpuinfo | grep ^processor | wc -l
worker_processes 4;

# Pid file location, the default value will often be just fine
pid /var/run/nginx.pid;


events {
	# 1024 is a decent starting point
	# You can increase it further, but you should check "ulimit -n" before
	# adjusting higher
	worker_connections 1024;

	# If you find that this gives you extra performance feel free to uncomment
	# I however didn't find it to have any effect at all
	# multi_accept on;
}

http {
# Working too
  log_format custom_format '$http_host '
                    '$remote_addr [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '$request_time '
                    '$upstream_response_time';

  access_log /var/log/nginx/my-access.log custom_format;
  error_log /var/log/nginx/my-error.log;

  # access_log syslog:server=elk-server-ip:1025 custom_format;

	#
	# Basic optimizations
	#

	sendfile on;
	tcp_nodelay on;

	# This might be better set to on for some, off for some
	# for me however, I saw no difference between having it enabled or disabled
	tcp_nopush on;

	# How long to wait for new request from the same connection
	keepalive_timeout 180;

	# Don't advertise every detail of the server to all requests (security)
	server_tokens off;

	# Uncomment if you for some reason have a very long domain name
	# server_names_hash_bucket_size 64;

	# File type detection and default
	include /etc/nginx/mime.types;
	default_type application/octet-stream;


	#
	# Logging Settings
	#

	# Access logging is a bit of useless, don't
	# enable it unless you really need to
	# access_log /var/log/nginx/access.log;

	# Error logging however is useful, make sure the destination folder exists
	# error_log /var/log/nginx/error.log;


	#
	# Gzip Settings
	#
	# Gzipping content will increase performance from client's point of view
	#

	# Enable Gzip compression
	gzip on;

	# But disable it for clients that don't support it
	gzip_disable "msie6";
	gzip_disable "Wget";

	# Make sure any third-party proxies cache things properly
	gzip_vary on;

	# Compress regardless of caching headers
	gzip_proxied any;

	# Compress as much as possible
	gzip_comp_level 9;

	# You might want to change this to 1.0 if you find Gzip gives you more
	# than keepalive, as keepalive won't work with 1.0 and Gzip
	# gzip_http_version 1.0;

	# File types to Gzip compress, it works best for plain text files
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;


	#
	# Caching
	#

	# Enables proxy cache to /var/cache/nginx/xx/xx/xx/*
	# ... calls the cache "STATIC"
	# ... delete files from cache completely if not requested within 24h
	# ... and allow a maximum of 1GB of disk space to be consumed for it
	#
	# Make sure the directory /var/cache/nginx exists and
	# is writable by the Nginx user, or change the path
	#
	proxy_cache_path /var/cache/nginx/ levels=1:2 keys_zone=main:10m loader_threshold=300 loader_files=200 inactive=60m max_size=1g use_temp_path=off;
        proxy_cache_key         "$scheme$host$request_uri";

	# Include all additional configuration files (please do check their contents)
	include /etc/nginx/conf.d/*.conf;

	geo $purge_allowed {
    default         0;  # deny from other
		192.168.0.0/16  1;  # allow
	}

	map $request_method $purge_method {
		PURGE 1;
		default 0;
	}


	# Include all configs for enabled sites
	# include /etc/nginx/sites-enabled/*;
}

stream {
    include stream_conf.d/*.conf;
}
